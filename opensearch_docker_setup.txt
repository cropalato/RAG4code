# docker-compose-opensearch.yml
version: '3.8'

services:
  # OpenSearch Cluster
  opensearch-node1:
    image: opensearchproject/opensearch:2.11.0
    container_name: opensearch-node1
    environment:
      - cluster.name=coderag-cluster
      - node.name=opensearch-node1
      - discovery.seed_hosts=opensearch-node1
      - cluster.initial_cluster_manager_nodes=opensearch-node1
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"  # Desabilitar para simplicidade
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"
    networks:
      - coderag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # OpenSearch Dashboards (opcional, para visualiza√ß√£o)
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.0
    container_name: opensearch-dashboards
    ports:
      - "5601:5601"
    expose:
      - "5601"
    environment:
      - 'OPENSEARCH_HOSTS=["http://opensearch-node1:9200"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
    networks:
      - coderag-network
    depends_on:
      opensearch-node1:
        condition: service_healthy

  # CodeRAG Application
  coderag-opensearch:
    build:
      context: .
      dockerfile: Dockerfile.opensearch
    ports:
      - "8080:8080"
    volumes:
      - ./projects:/projects:ro
      - coderag_data:/data
    environment:
      # Ollama Configuration
      OLLAMA_HOST: http://host.docker.internal:11434
      EMBEDDING_MODEL: nomic-embed-text
      CHAT_MODEL: qwen2.5-coder
      
      # OpenSearch Configuration
      OPENSEARCH_HOST: opensearch-node1
      OPENSEARCH_PORT: 9200
      OPENSEARCH_USER: admin
      OPENSEARCH_PASSWORD: admin
      OPENSEARCH_USE_SSL: false
      OPENSEARCH_VERIFY_CERTS: false
      OPENSEARCH_INDEX: code-rag-index
      
      # RAG Configuration
      CHUNK_SIZE: 1500
      MAX_CONTEXT_CHUNKS: 5
      TEMPERATURE: 0.1
      TOP_P: 0.9
      REQUEST_TIMEOUT: 120
      
      # File Processing
      FILE_PATTERNS: "*.py,*.js,*.ts,*.jsx,*.tsx,*.java,*.cpp,*.c,*.h,*.cs"
      IGNORE_PATTERNS: "node_modules,.git,__pycache__,.venv,build,dist"
      
      # API Configuration
      API_PORT: 8080
      FLASK_DEBUG: false
    
    extra_hosts:
      - "host.docker.internal:host-gateway"
    
    networks:
      - coderag-network
    
    depends_on:
      opensearch-node1:
        condition: service_healthy
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  opensearch-data1:
    driver: local
  coderag_data:
    driver: local

networks:
  coderag-network:
    driver: bridge

---

# Dockerfile.opensearch
FROM python:3.11-slim

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

RUN apt-get update && apt-get install -y curl git && rm -rf /var/lib/apt/lists/*
RUN mkdir -p /app /data /projects
WORKDIR /app

# Instalar depend√™ncias espec√≠ficas para OpenSearch
COPY requirements-opensearch.txt ./requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

COPY opensearch_code_rag.py ./code_rag.py
COPY opensearch_web_api.py ./web_api.py
COPY interactive_opensearch.py ./interactive.py
COPY entrypoint-opensearch.sh ./entrypoint.sh
COPY healthcheck-opensearch.sh ./healthcheck.sh

RUN chmod +x *.sh

RUN groupadd -r coderag && useradd -r -g coderag coderag
RUN chown -R coderag:coderag /app /data /projects

USER coderag
EXPOSE 8080

HEALTHCHECK --interval=30s --timeout=10s --retries=3 CMD ["./healthcheck.sh"]
ENTRYPOINT ["./entrypoint.sh"]
CMD ["web"]

---

# requirements-opensearch.txt
flask>=2.3.0
flask-cors>=4.0.0
opensearch-py>=2.3.0
requests>=2.31.0
urllib3>=1.26.0

---

# entrypoint-opensearch.sh
#!/bin/bash
set -e

echo "üîç CodeRAG with OpenSearch Starting..."
echo "OpenSearch: ${OPENSEARCH_HOST}:${OPENSEARCH_PORT}"
echo "Ollama: ${OLLAMA_HOST}"
echo "Index: ${OPENSEARCH_INDEX}"

mkdir -p /data /projects

# Aguardar OpenSearch estar dispon√≠vel
if [ "${WAIT_FOR_OPENSEARCH:-true}" = "true" ]; then
    echo "‚è≥ Aguardando OpenSearch..."
    timeout=120
    while [ $timeout -gt 0 ]; do
        if curl -s "http://${OPENSEARCH_HOST}:${OPENSEARCH_PORT}/_cluster/health" > /dev/null 2>&1; then
            echo "‚úÖ OpenSearch dispon√≠vel"
            break
        fi
        echo "   Tentando conectar ao OpenSearch... ($timeout segundos restantes)"
        sleep 5
        timeout=$((timeout - 5))
    done
    
    if [ $timeout -le 0 ]; then
        echo "‚ö†Ô∏è Timeout aguardando OpenSearch, continuando..."
    fi
fi

# Aguardar Ollama estar dispon√≠vel
if [ "${WAIT_FOR_OLLAMA:-true}" = "true" ]; then
    echo "‚è≥ Aguardando Ollama..."
    timeout=60
    while [ $timeout -gt 0 ]; do
        if curl -s "${OLLAMA_HOST}/api/tags" > /dev/null 2>&1; then
            echo "‚úÖ Ollama dispon√≠vel"
            break
        fi
        echo "   Tentando conectar ao Ollama... ($timeout segundos restantes)"
        sleep 5
        timeout=$((timeout - 5))
    done
fi

case "$1" in
    "web")
        echo "üåê Iniciando API Web..."
        exec python web_api.py
        ;;
    "interactive")
        echo "üí¨ Iniciando modo interativo..."
        exec python interactive.py
        ;;
    "cli")
        shift
        echo "‚å®Ô∏è Executando comando CLI..."
        exec python code_rag.py "$@"
        ;;
    *)
        exec python web_api.py
        ;;
esac

---

# healthcheck-opensearch.sh
#!/bin/bash

# Verificar processo Python
if ! pgrep -f "python" > /dev/null; then
    echo "‚ùå Processo Python n√£o est√° rodando"
    exit 1
fi

# Verificar API Web
if ! curl -f -s http://localhost:8080/health > /dev/null; then
    echo "‚ùå API web n√£o responde"
    exit 1
fi

# Verificar OpenSearch
if ! curl -f -s "http://${OPENSEARCH_HOST}:${OPENSEARCH_PORT}/_cluster/health" > /dev/null; then
    echo "‚ùå OpenSearch n√£o dispon√≠vel"
    exit 1
fi

echo "‚úÖ Sistema saud√°vel"
exit 0

---

# Makefile.opensearch
.PHONY: build-os run-os stop-os logs-os shell-os index-os ask-os stats-os clean-os

IMAGE_NAME = coderag-opensearch
PROJECTS_DIR = ./projects

# Build da imagem
build-os:
	@echo "üî® Construindo imagem OpenSearch..."
	docker build -f Dockerfile.opensearch -t $(IMAGE_NAME) .

# Executar com OpenSearch
run-os:
	@echo "üöÄ Iniciando CodeRAG com OpenSearch..."
	docker-compose -f docker-compose-opensearch.yml up -d

# Parar containers
stop-os:
	@echo "‚èπÔ∏è Parando containers..."
	docker-compose -f docker-compose-opensearch.yml down

# Limpar tudo
clean-os:
	@echo "üßπ Limpando containers e volumes..."
	docker-compose -f docker-compose-opensearch.yml down -v
	docker rmi $(IMAGE_NAME) 2>/dev/null || true

# Ver logs
logs-os:
	@echo "üìã Mostrando logs..."
	docker-compose -f docker-compose-opensearch.yml logs -f coderag-opensearch

# Shell no container
shell-os:
	@echo "üêö Abrindo shell..."
	docker-compose -f docker-compose-opensearch.yml exec coderag-opensearch bash

# Comandos espec√≠ficos
index-os:
	@if [ -z "$(PROJECT)" ]; then \
		echo "‚ùå Use: make index-os PROJECT=nome_do_projeto"; \
	else \
		echo "üì¶ Indexando projeto: $(PROJECT)"; \
		docker-compose -f docker-compose-opensearch.yml exec coderag-opensearch python code_rag.py index --project $(PROJECT); \
	fi

ask-os:
	@if [ -z "$(QUESTION)" ]; then \
		echo "‚ùå Use: make ask-os QUESTION=\"sua pergunta\""; \
	else \
		echo "‚ùì Fazendo pergunta..."; \
		docker-compose -f docker-compose-opensearch.yml exec coderag-opensearch python code_rag.py ask --question "$(QUESTION)"; \
	fi

stats-os:
	@echo "üìä Mostrando estat√≠sticas..."
	docker-compose -f docker-compose-opensearch.yml exec coderag-opensearch python code_rag.py stats

# Dashboards
dashboards:
	@echo "üìä OpenSearch Dashboards: http://localhost:5601"
	@open http://localhost:5601 2>/dev/null || xdg-open http://localhost:5601 2>/dev/null || echo "Acesse manualmente: http://localhost:5601"

# Setup inicial
setup-os:
	@echo "‚öôÔ∏è Setup OpenSearch..."
	@mkdir -p $(PROJECTS_DIR)
	@echo "OPENSEARCH_HOST=opensearch-node1" > .env.opensearch
	@echo "OPENSEARCH_PORT=9200" >> .env.opensearch
	@echo "OPENSEARCH_INDEX=code-rag-index" >> .env.opensearch
	@echo "‚úÖ Setup OpenSearch conclu√≠do!"

---

# .env.opensearch
# OpenSearch Configuration
OPENSEARCH_HOST=opensearch-node1
OPENSEARCH_PORT=9200
OPENSEARCH_USER=admin
OPENSEARCH_PASSWORD=admin
OPENSEARCH_USE_SSL=false
OPENSEARCH_VERIFY_CERTS=false
OPENSEARCH_INDEX=code-rag-index

# Ollama Configuration
OLLAMA_HOST=http://host.docker.internal:11434
EMBEDDING_MODEL=nomic-embed-text
CHAT_MODEL=qwen2.5-coder

# RAG Configuration
CHUNK_SIZE=1500
MAX_CONTEXT_CHUNKS=5
TEMPERATURE=0.1
TOP_P=0.9

# Performance
WAIT_FOR_OPENSEARCH=true
WAIT_FOR_OLLAMA=true

---

# README-OpenSearch.md
# üîç CodeRAG com OpenSearch

## Recursos Adicionais do OpenSearch:

### ‚úÖ Vantagens sobre ChromaDB:
- **Busca H√≠brida**: Vetorial + textual + filtros
- **Escalabilidade**: Milh√µes de documentos
- **Dashboards**: Interface visual para an√°lise
- **APIs REST**: Integra√ß√£o robusta
- **Clustering**: Alta disponibilidade
- **Agrega√ß√µes**: Estat√≠sticas avan√ßadas

### üìä Funcionalidades Extras:
- **Filtro por projeto**: Buscar apenas em projetos espec√≠ficos
- **Highlight**: Destacar trechos relevantes
- **Scoring avan√ßado**: Combina similaridade vetorial + textual
- **Agrega√ß√µes**: Estat√≠sticas por projeto, extens√£o, etc.
- **Dashboards**: Visualiza√ß√£o via OpenSearch Dashboards

## üöÄ Como Usar:

### Setup Inicial:
```bash
# Setup
make setup-os

# Construir e iniciar
make build-os
make run-os

# Aguardar inicializa√ß√£o (pode levar 2-3 minutos)
make logs-os
```

### Comandos:
```bash
# Indexar projeto
make index-os PROJECT=meu-projeto

# Fazer pergunta
make ask-os QUESTION="Como funciona a autentica√ß√£o?"

# Fazer pergunta filtrada por projeto
docker-compose -f docker-compose-opensearch.yml exec coderag-opensearch \
  python code_rag.py ask --question "Como funciona login?" --filter meu-projeto

# Ver estat√≠sticas
make stats-os

# Acessar dashboards
make dashboards  # http://localhost:5601
```

### Interfaces:
- **API Web**: http://localhost:8080
- **OpenSearch**: http://localhost:9200
- **Dashboards**: http://localhost:5601

## üìà Performance:

### Recursos Recomendados:
- **RAM**: 4GB+ (OpenSearch usa ~2GB)
- **CPU**: 2+ cores
- **Disk**: SSD recomendado

### Para Projetos Grandes:
```bash
# Aumentar heap do OpenSearch
# Editar docker-compose-opensearch.yml:
# OPENSEARCH_JAVA_OPTS=-Xms2g -Xmx2g
```

## üîß Configura√ß√µes Avan√ßadas:

### Clustering (Produ√ß√£o):
- Adicionar mais n√≥s OpenSearch
- Configurar replica√ß√£o
- Load balancer

### Security:
- Habilitar SSL/TLS
- Configurar autentica√ß√£o
- Role-based access control

### Monitoring:
- M√©tricas via Dashboards
- Alertas personalizados
- Performance monitoring

## üìä Compara√ß√£o Pr√°tica:

| Recurso | ChromaDB | OpenSearch |
|---------|----------|------------|
| Setup | Simples | M√©dio |
| Recursos | Baixo (~500MB) | Alto (~2GB) |
| Busca | Vetorial | H√≠brida |
| Filtros | B√°sicos | Avan√ßados |
| Dashboards | N√£o | Sim |
| Produ√ß√£o | Pequeno/M√©dio | Enterprise |
| Backup | Manual | Autom√°tico |

**Recomenda√ß√£o**: 
- **ChromaDB**: Para desenvolvimento e projetos pequenos/m√©dios
- **OpenSearch**: Para produ√ß√£o e projetos grandes/complexos